// @generated by protoc-gen-es v2.5.0 with parameter "target=ts"
// @generated from file schema.proto (package chat, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file schema.proto.
 */
export const file_schema: GenFile = /*@__PURE__*/
  fileDesc("CgxzY2hlbWEucHJvdG8SBGNoYXQiegoNU3RyZWFtTWVzc2FnZRItCgdyZXF1ZXN0GAEgASgLMhouY2hhdC5BSUNvbXB1dGF0aW9uUmVxdWVzdEgAEi8KCHJlc3BvbnNlGAIgASgLMhsuY2hhdC5BSUNvbXB1dGF0aW9uUmVzcG9uc2VIAEIJCgdwYXlsb2FkIloKFEFJQ29tcHV0YXRpb25SZXF1ZXN0Eg0KBW1vZGVsGAEgASgJEiMKCG1lc3NhZ2VzGAIgAygLMhEuY2hhdC5DaGF0TWVzc2FnZRIOCgZqb2JfaWQYAyABKAkiLAoLQ2hhdE1lc3NhZ2USDAoEcm9sZRgBIAEoCRIPCgdjb250ZW50GAIgASgJIkYKFUFJQ29tcHV0YXRpb25SZXNwb25zZRIOCgZqb2JfaWQYASABKAkSDwoHY29udGVudBgCIAEoCRIMCgRkb25lGAMgASgIMkkKC0NoYXRTZXJ2aWNlEjoKCkNoYXRTdHJlYW0SEy5jaGF0LlN0cmVhbU1lc3NhZ2UaEy5jaGF0LlN0cmVhbU1lc3NhZ2UoATABYgZwcm90bzM");

/**
 * Message to send an array of role/content objects to the client
 *
 * @generated from message chat.StreamMessage
 */
export type StreamMessage = Message<"chat.StreamMessage"> & {
  /**
   * @generated from oneof chat.StreamMessage.payload
   */
  payload: {
    /**
     * Sent from server to client
     *
     * @generated from field: chat.AIComputationRequest request = 1;
     */
    value: AIComputationRequest;
    case: "request";
  } | {
    /**
     * Sent from client to server
     *
     * @generated from field: chat.AIComputationResponse response = 2;
     */
    value: AIComputationResponse;
    case: "response";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message chat.StreamMessage.
 * Use `create(StreamMessageSchema)` to create a new message.
 */
export const StreamMessageSchema: GenMessage<StreamMessage> = /*@__PURE__*/
  messageDesc(file_schema, 0);

/**
 * @generated from message chat.AIComputationRequest
 */
export type AIComputationRequest = Message<"chat.AIComputationRequest"> & {
  /**
   * @generated from field: string model = 1;
   */
  model: string;

  /**
   * Array of role/content objects
   *
   * @generated from field: repeated chat.ChatMessage messages = 2;
   */
  messages: ChatMessage[];

  /**
   * Unique identifier for the job
   *
   * @generated from field: string job_id = 3;
   */
  jobId: string;
};

/**
 * Describes the message chat.AIComputationRequest.
 * Use `create(AIComputationRequestSchema)` to create a new message.
 */
export const AIComputationRequestSchema: GenMessage<AIComputationRequest> = /*@__PURE__*/
  messageDesc(file_schema, 1);

/**
 * @generated from message chat.ChatMessage
 */
export type ChatMessage = Message<"chat.ChatMessage"> & {
  /**
   * Role of the sender (e.g., "user", "assistant")
   *
   * @generated from field: string role = 1;
   */
  role: string;

  /**
   * Content of the message
   *
   * @generated from field: string content = 2;
   */
  content: string;
};

/**
 * Describes the message chat.ChatMessage.
 * Use `create(ChatMessageSchema)` to create a new message.
 */
export const ChatMessageSchema: GenMessage<ChatMessage> = /*@__PURE__*/
  messageDesc(file_schema, 2);

/**
 * @generated from message chat.AIComputationResponse
 */
export type AIComputationResponse = Message<"chat.AIComputationResponse"> & {
  /**
   * @generated from field: string job_id = 1;
   */
  jobId: string;

  /**
   * Streamed content from the client (e.g. AI response tokens)
   *
   * @generated from field: string content = 2;
   */
  content: string;

  /**
   * Marks end of client response
   *
   * @generated from field: bool done = 3;
   */
  done: boolean;
};

/**
 * Describes the message chat.AIComputationResponse.
 * Use `create(AIComputationResponseSchema)` to create a new message.
 */
export const AIComputationResponseSchema: GenMessage<AIComputationResponse> = /*@__PURE__*/
  messageDesc(file_schema, 3);

/**
 * Service definition for streaming response
 *
 * @generated from service chat.ChatService
 */
export const ChatService: GenService<{
  /**
   * Server sends ChatPrompt, client streams ChatResponse back
   *
   * @generated from rpc chat.ChatService.ChatStream
   */
  chatStream: {
    methodKind: "bidi_streaming";
    input: typeof StreamMessageSchema;
    output: typeof StreamMessageSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_schema, 0);

